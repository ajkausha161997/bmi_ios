workflows:
  ios-project-debug: # workflow ID
    name: iOS debug # workflow name
    environment:
      xcode: latest
      cocoapods: default
      vars:
        XCODE_PROJECT: "BMI Calculator.xcodeproj" # <-- Put the name of your project here.
        XCODE_SCHEME: "BMI Calculator" # <-- Put the name of your scheme here.
    scripts:
      - name: Run tests
        script: |
          xcodebuild \
          -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
          clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - name: Build debug app
        script: |
          xcodebuild build -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
    artifacts:
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-project-release:
    name: iOS release
    environment:
      vars:
        CM_CERTIFICATE: Encrypted(Z0FBQUFBQmdtMnE1S0NPSFVldFdjN1hUdEVoU2NMaUNqRVlLejNKRGJPR1pEQllNOG9jbEZYaFozZW5Bb0ItZDYwWEtVQ2ZpZFRaVXpLXzJlUVQwSUQzdFhuXzBLZWpUYmlxSHAtWFRrSXVZc3B3Nnc1TW0wOUczWUZLeXY5RnRPSXBlendBMnYwSVY0ZUZGekw2am1wcktQZ0xfaXNRNEJZOEVoLUpmMWpSY2NqMVdwdTYxNFVTc2IxaXRsa08xWHU5d3J1d1JTbnBRc1NGcENUYjNPdjhUaTJWMGVXZUV2dEE1eXYxSUxqY1RreTVfYkVzYU5pdzR2aVZGdWZzdzkyaEd6c2NuVm5IdFd4VkdFN1FMbjlZaElGTlJqcE5YcldkWEprZlZ2N0c2ZkxJSHpQY2hsZ2JPamcyTU1DYnpwYjdBbHg2YXEtTUxQQVhLSTd1X0FZUE8wTmxvRXUtTWRXRkFTT0pUUmFnU2l3QldsUWRkUlktNEZqeUZtd0xvYTVzMU13aTU0ZjlvdVYtbGVYYm1yQ1RUMmZCMUF0blp4NkE0MGUweEsyMXQ0eXFmdDl2eGR4UlNMZ3IxT3E2dVNIajNON2l0YWtfR1owdXNjX3FWaEI4cDRXdkNMRWI1RS02cEZvWWl1ek5TTkliX3JXcjZFNnRzQ3cxdi1mQmhsaE9aQnFVLWNvb2puNnh2NGVVWnpFTE9URTJVTjZwZVpib1pOX09rNXVSNW4wTDJjSlE0UlN3TFB3RnJ0TjdMbHZxWFhGdFNkSVIwa3NjYUJZR05kVmxpak5pY2MzQnJuek1CRDZ4ckFvSlJaMjVWaF9DdFhmVVlWbzVBY1IyWWVJbTY1RnJaQTJtaER5QWhGUG9CbUFBM21NMDBOS044am9CaEJFdWx6cXJTdmNob0JWZHlSX0ZnbFY3a2xpMXZVWUFTQkhNcnV0c25XNXFHZ1o4cGJvS01CdEltQ1dOU0x2QmdiLVFGTERQWWJpMW5BZFl2SGZHTHFOQmE5bDFPVEowamNzY29VdlRQMldKYUNMZUxqM01Sc2VyQl9KLU80dG4tdUJpU0ppYU1laFlWWkxNS3hqby1STnFBRHA1c0xBVFFhRE96M2JJVjNaQmk0YVNaM3dWQm5ETWgydEtJdnNVWHNqZFZFMnZSc2U2VWsyNS1kLVhCMDNRWVJVSEdVUjJHMkY5OTc1R0xiMUtMN2NucmltWldpell5LVdPSkFfY3dYYVVZWGRCSnJYMzFvUjlhRi13MU1BN3J2SW82YlBZUjEtMFlvT2ZueHRmak1UekhxalVDM25rWG9ucHhBMzBDQ2U2S0lEZzJxVTZQZVYxRURubVhHbElKbFV6eF9MZ0QyV0gyQndUMHV6c0FrV1Vwdmp4Zi1HLV96ZmVJSHVXZmVuSGZ6NlBHMmQtZDdEV3k1Sjh0UnpJb0JHNkdWbXljSjJUcVg3MHNfRkI3TVloVHVVMVJiUWxEZjJpeWY3MXNNZlVBbER4clhjYnN2cm5XeFFYSlZyaXZ5OUZHZXAwRW5kM00zZ1lscjMyWjVHU3dVM3MwOVFlWWZxcWlkR1pqenI0eGdZeVJnRGI2QVE1ZWVXeEx4RE5GWHRwb2cyN256RGpSVjhYRkV5dFA0QXpnb1M5Tndid2lOQ2YydkhWZTI4elhJWm1pMFpKT3AzOGYxZXV6SmtsQmp2SXBqOGtaaWxJQmNGZGFtX3VNVENqNVBRTzF1QXZMTzFhN2lBbjRmVXdIbjBKbHlhUFl6aXZDOFhOWW5ZbE4yRnF3YTZVUzVqeHMxNEpRaGxZNmxCVURqUUh4cDYxWkFna1ZQTnBJMy01WnRodzVBTy04cE9NQkpSNnZjTWJzdE9zSkJYekVRZnpvdHFFVWdmLWdkUU9Vemdmck5UdU95WlY4bnVSSjRrZEUyZ3Q2TnJWVnJoRENiVmN5bnVPUW5SUDFtUlk2bHZTQ2E5LXVaRl83Nm1nN1VmdEVfR1FwenM3SDFxUzcyOHExZkxmaVRCc1ZuUGFIQldwOWN3RXV4SFN5ZTZFeTFUbVB4TDU2Ry1UNGFWVFJPY2lXZ1lqZEoyUW9XaGNQNEVkVm41UFpidWxwR0xOQ0VSam1Qb1FTZUNvXzN4WDhQVlRBbkhfb2RlUnktVVljRXRMb1M0Y2NGb1ZNMmpjM2dxckVXbFRTN0RibjktSlctVmFuTnBZV29tMzUtY1djSS1mY015WkwwcUhwZ1NEMGlNM3o4SkVsbjE2ZVMybGxlTTFOQTg4WFg0WUFkcmg0YzZWMnBBel9TbVFacVAyeGpNLUVrUFZWUDVTV09vcWtPMnV3c182bWVJYndmSVhLYWhaX2FKczhmWG1EOGJyZklQZFRBMi1vUFhhY1RTQmV3d3dkRTg4N05FUUROYlRyZms0N1VyRFJHN3UtYWt4T0JJaWJmZ3JqWHVYZjA3eV96Ynl1WTMxejc0eV9BUjVKRG1DRERMNHY2UEIwbnNfU3ZSQUc2ajdQQnI0MFFXcHVFS1JqTk5WSTBDLTVKQWRpQlQ1aERBT0w3YlNxbTh5ckJ3VDdjVU10NlhXeUdiSjZyb3JfQjNadzBOQ2V4LWZZTmVOQ2JKSWZCQS04UXhndTQyQm1xTTVIZFBJaEJDNXlPMUFRTmNYMlgyb0MtRy0yeTFodVExUFh6OXhQMGVjZml1QUtBYW80TEI2TEpBVmZ2d0VaaHcyZW9kTU8tRWJMRE1udnpEUDU2b3dBOGNWdjFYZUc2RHlBVTUwR3poM2FLT05xNVdFNTZCVmpXajlOenBWWmtxclNWQWZpVG9nd0ZOUy1JNkh0dXcwbmJTX2stU3BBLTl5VXQ3cGdzdUlKWDh1MUJ0cFNXWmtpbmd0SEwtSU1fbHg0SW15TjU1aU9pZGt3dG9KRWRUeHBSWjlVMndhU2trdWtmQzFzQU12aFFxQ2lzSGJKWDlrVHEtTVEweXJYX2lmT0VkSElfWnh0WW4wcGZtdmZGa3R0YmducVQ3dkhNc19FWXJnRnJrSXozVUQ5UkVyNXE5RFJDeGxvNlFnRzNWM2QwSThNN0M5WXk2cG8xaVk3WXFRWE9rUWMtNnRwNEszWFlWaVFSUmszSm1vc0Y2YU5nZk56ME9URURJeDR2LVA4eWwtenJIRk5ET2ZuUEtfU3g4N0w3NFpkLVMydWF2WnZ5WVI0bmtMd2hSTWhJel9DcUg5UjJrWEIwd2ZIQVJwQXRCWXRwVm9KdXFabnlnZmZPQW1CM3BxZTdlTnAyWUlLTm1mRDBrTFI3V01IUTFWYnpyQ2R5RURLbWY2N05PM1piaTdURjYwcUR6UEtiQi1TeTFNMVVzOV94b19nWjZaQ1NyTl9mYjNIb1hnQlRzbVB2bXp3UTV1RXdld1REM0dfN1JYT19LM2xOZDE3RGdCMlFIYW9abGtLNmNrdVFEZVRzdlNKdUZnZU01V0w0cFJjQWxkN1YxemFDQkNZcWdreXpTdGl4NUZRc0syYklraDZPNGhjU0Y1bElUckg1TU15ZmYyS0M4eW9VdFA2YmlCS0l2RDRzcVpwT1ZkS0lKTXZXT3ZHejNNNHptVVZXNUFRcVlFbDlMOWhhY0NMSjVpTGU4SGxlajUyUElaNGU4dUpELUNBSWxRZXNjc0dFYnpmYmdYa3huZHdjeng3Q0Foa3VHRGI1V1lETGJ1dmlreFhlaERLV0JMdEN0NU1yc2pVX0w3NS1uSUE1d0dYNDM0R0RrTmlfR3hhRjdxOUo2SmRuY1VUeWdTUlh0TC1kZ1ZtY1NNX1hfODNiTFktVzJPMmJoQU9EeGFidHBkNDJjQl80UjJZelM4Y1JSdGdPOS10NGhWYkJlNHNyUm1JMk1DaExYMDd2Tk1KTTBiQUp2dzFZQ1NBcS1uUlpPblpfbkUwRFNOVzdMWGNVU0x5ckJaejYxQ2xkdHJrS1dKczBfbi10TDVGRHFZSzZ1RXVHSTJmUjhxYVBqNHZhMDNpQk9LcWV2VHZiOEJjRmVKZjA0eHpHR2d2VzhiOF9fVUs3emIzdElfYWt5bDV4ZjJiSHhmUjhvMC0yZVlBRlVnWnk2dEdwZFdtT3lhaHpnQmRqbWxXaE9vME9CMjBUSW5pMGlGa2tEZV9rNW1nZzQyeWNIZklYRExTODYxRUVBaTBsdmxaTmc1N0tJTHFIaTdYemdTR1o3ekcwTWxva2FvZFZkbXdxb1ktNVktZ2ptUWZUaDFnNEVyWHZfS0dLVWlWa0tTMko2TDg0dDlJOHNDQXNrOC1SSHgtWkY0UnNHME5BRWNoUE1mR2RicjM1YVBmTm02Mm1BSzBnZ09aTjlLaFk0STZ2S0FMWlEyaDdjYVlQc2xfYzhoVjhPQWQwWGhMLXU5QlNqMGxsczBsY2Z5QmdmUjk1d2VJME85T0paLW96cnJEaDJ5MXBkR25qcHMwMlZ2amRNbjFnUldPVHBEZkxsNGtlYlZuWk5tSkg1NG5jamp2akZvVGI1a2lCRzB5NG94c1VvdE5sTFE5YzktbVhpbVlhczBwZUlvVjdoczV3WmpSaGxPX3ducExtZ1hUUDR5U09sMUtqWU90WXY0MGVSU1FmVDRqZE9YS0NDS2IxQmEtMktwUDZUZnYxTHJzTlI0cEdXOGFad0xNeUFlaTFCV2RuYmlDQURNempIaUZmX0Fva0Zqbk1UQW40SDVVR3BjamloRjE2TmpmS0RlelN1ejJLVXp0Z1JmMWVEMmJGYkRTTm9RM2JSUEZPdUlTMkdSV1ZEaHFmTF9xXzFoTGNMR3NwenhRT3Jqc3NvQ2RCR1k0RUwyS3Z0dUNPMElmU0lwYUFSelJ4VGRLT3pFc19mMEhHdjUxVEtYXzRueVBULTc0eDNXSC1FMkVEaGlFTGtaLVNiSjJIQXBlajJpZi1VVFZnVjQ4S3NheEh0YWgzVlA4UEJDNDA2Q2g4WHFtSnFqbWFyM0dqTkh2bDlsSlF2VjRCWEJldGw2VkZyNUtCQVRfV0IzNV94bFpQTkdqZVpIcWo4Wjhqd0txSEVoaXVKS3dpWURNMF9vTzNaWWhQZEVla0VIZl9hZ1NpUDVUalREYmxKSmVRTTM5dE1KLVNVT0pGQi1HS2FTYjFScUFGaEI4cmRnZWUyeUtCQkZ4eEV3X1h0RjY3RFhQNC0zdzg5LUVoREZGQ0pLY3hwLWVWMzFCSXg5U1M4b1hnaWFEeEdDQkJKOEdldzFqY3JNdHAxT2lwOEI3WTRSQzd0Y2poVVpzaXZjbG9lblNNM0xacHNoZ3h6Vll5QmM4N0xUVlBMU0MwUDgyZHpNN2UxVE42dXlhMzJkQmFTSzJXMUh0N2NqY0xmQjI4R1A1Ql9uc0s5bUxaUW1WVmx0ZG1RS0xtUW52dHdiOHBhQkFqY1d0M0ZMMVhnakQzcDZhM01OLVo2YzczWFZEb2ZCcURUQUh0YkNtOFJFbWxjZHYybC11d2xSNGRrVkpzTWJnXzQ1d1pXcFZFNlZWX0xHSVJuWTZjLXI2Ym85SXhPRmhRTEY3el9PeHBoWUpFaWgtSXVhRXRMcEdGZGVvem0xaVJiOE9jYVViTmJhMTNMVUFXYmZvSEhPdnFKb1hBeE1mX0pZeG1zSFJ1bkVpTC0xdDVFZ05NRmJtdzFBZ0EyTURsY3luT09ELTBtcXZKQW5KdEFGRUw0Rm9JeU16N25lNE8yM3ZNOXhyVFVYb2Nna3pFZG9VQ1V3SE1mcVNWaE4wdHNSUjBQTW41Vk1HbUZCUndPeE5aY08tRC1pQUxkN0UyVkJ5THZJdEFrSlMwSWt0REM2MlN5RHpvR2Rpc0pUZGp1Y245aWVnZTVFS2REOXAxTTRQdFhhakd5V25XWFYzcF9RdDY1RmJqbmVPUFJlMkxaMHdFR0NKNHk4M3FsOHlMUEtwNkVDSlUxOXRwcEJEZUdKSXhKQzB0b2N6YXJtR2VOMENDWTRZdnRFemhPZFZiNmRCNnBGRUJwWTl2YXRiczBxancyeVliRFl5TUlqUktkeFBMSXFlb2JZSEtKVFFuRUt4OE5lQ0tEbjBsYVUwUHplMlZRRDFnbDAwcjVWLVY5b2ROdm5SYnRzc2dvanlIeV9OSm1ISktHajZ3bzRSRnJrUlZzZUJjb0JPdVl1d0pEQXAtbkIxdVJFTXk4YjdCbDQ5a1Mwc2NIZVVrTTVrVlFELXE0N3ZNMnlPeTM0cXdkSWRpdTNuZHFvZVRfOUZtc3pjZjJlUU1YNUhPUW9UU21pbXg4UjdlRldIaVdiRXN0WGNoTDZNdDBSck1lUHhNbWRPVDdxenEwUEtXc1IzVVpxNS1QRWtWdmtMcnlOZDlRTWFaeFJNbUl5aTc2dEFwNWMwMmZEREhnQlJZREdCcXotX0JYWUtLRXgydzZ0V05kcDhVTzRPNDhFSWNTZVJBcklndjZKalVSbTNHZmJndTJ4WXVwWi02TXFsNGVWYkxCLU5ieVltYUlNTXN6Q2Q3UFJLMmRKQ3I3TFZBbFIzODRlLVB2ZUs0ZTNLbHhNdzJVaHVXVHdIS2xDaWQyYUtPTzFaTzRrRDFzNVdJVF9SN0tkT2hfNFhpZlZUbjNyeVNPUU00VmVmWHZFVndVeFpfVkZsa3ktR0xQV1E0TVNzS2s5S250OExlZVRkX1drZTN0Y2JIbFgteXJWR2llZ2E1T0lKNHhERlk5YkJfdGk4eGlkbHJEdl9YUGU0bWJWRGYxd0lwSG5jZm92NEsyZGdsOHoxT3J2anp3aTI0Zm53OVFDRXBfQnVQaUxJMk5XcUZyUDRsOFRlaDVST19kQW5oVHJGSUVHQ3BvSVU3aktLY00xa1c1QWVFMWhxazdWd3EzYmlfMlFQUkNmTjFBRHFwcUsxeTlodE50Y2Z6LUdXc0MxU2VNREtQTkVuN29IQzd4ZVZpN1BGSTRvNDdYQ3NLWG43LUhkSmpjUEFITXVjU3RxemVTOThZckU0a2dpR01nSTNfOXdZcldXTE0xRWk2M1RXekhXdzlNd3ZZa0pVQnhIMzF2RTJONkZteWJNaTEzbVZxQW9xMjlRVE9ZektrUTJsb0tPaDRONzhDTlZhVnhxRHAwa3FFRGcwZWRONkdxVXo5bUh5ZWxaRnJhdTc2eXZVMWhEMzk5ZjVndWdlSlZoNFNhZEgwakpvUV9WenNMQldJaExmYVE0OGxVZE02dDFSd0xVMEdVTnN0SHNNUjY4NXRkdGNVU2hoYXdrOXRzY0NUcUtmZTFqZkNoT1V1ektZR3ZaMGZKWW04SDdwWUF1aWY0QTBnd25VejE3eF9oUkFyczRiV3VtUUdHaC1JbjEyYVYtMzRTOEsxREs1UGREZU53cndrY3NjWWJ6Xy00NDBidW9BUThhTE5JMF9RN3RleXRxS1lzdDI5QWFIY3hmOGJyTEowdHBfRlhlb2cwa01Hd2FDMzNhQWlURnZWWlNkYXVIVjhJUzFiQXN5cnVyR0lDdTZnNllMNG5OV2VMQ0M5Qy1MMVNYd1dqNklPeGIxU09fOEdFRVpTcmNreHA5c0VaUHhQczRtR0FobnQxMTFGUUJwZXVNVHpiMWg5dklCbVUzRFBUeTN1ZWMyaGM2S2FUaElDVjJ0d1JsN0s1SmpDSG9GRnh5eldZcVg3LVg0NWdVcnZRWE1qOE5CRjNOeEdqZDdySWszM29vVERIVUxTVkZyNlhvMnc5dGdMUnhKbXdhd3J2VFEyNXREUk02ZHdGUzVzV0Q4dWswbkFFQ2FuX2tIT0o1MFRldUZJN3o3UUtfdFgzUGNWMWwxNDgwQW1KbWZVUWJRTE9NT2RaS2tKRDMxejdyVG8zYVhCZFJ0MHJDVXBwb2s3TnlZdGZTWmtYdW5FV2o2X0QyU0x4MTN6TWlFelFDdkNmcllEM2VwYVB3ZURWV1pqMkprb3BJNWtBMWwtUWRHX2VtY3hpQzJDMWM0R3pWQzdSTnF5R0RVc0RzcE05Z0RXUT09)
        CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdtMnJUNGZQZzFSOVFnem9aeEFFODZvS1h3ak1rYUJidjVicDMycUk4ajUwTDJzWVdVUm5zc0Z4dk45S0pzMVBmSVVCWHpLTUxfYTRwNWpMQ2VsMTdLckp2S3c9PQ==)
        CM_PROVISIONING_PROFILE: Encrypted()
      xcode: latest
      cocoapods: default
    scripts:
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_HOME"
        PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
        echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up signing certificate
        echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
      # - |
      #   # run tests
      #   xcodebuild \
      #   -project "BMI Calculator.xcodeproj" \
      #   -scheme "BMI Calculator" \
      #   -sdk iphonesimulator \
      #   -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
      #   clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # build ipa
        xcode-project use-profiles
        xcode-project build-ipa --project "BMI Calculator.xcodeproj" --scheme "BMI Calculator"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-sonarqube:
    name: iOS sonarqube
    environment:
      vars:
        SONAR_TOKEN: "Encrypted(Z0FBQUFBQmZpQmtjU3JxNFJMOHBNMXYzZV9yMkZpb1p0Y2NKQ0pWbjhiNjNRLWhzcndDa2NMRU5teTVtVWlpYlFCTnF6eHVLMlNDaTVVQWxERHJGb2JRX0tZSm5jOUtmQUZ6Q2FVQjlzSW43VGE0WkZYdzVuOHVYSHdkSHdTOE82MlAzVXNoeEVPSm8=)"
        SONAR_PROJECT_KEY: "Encrypted(Z0FBQUFBQmZpbVhKVXc3eldWX0t2am5jWG1MU0RwOEFJVThkMmdZRHB1YTZDdkhMcGFqaGNQR2plYWNmYkd0UkVOZFQyZWtkMFhIYXVnN1RyWkd1UjZPNGRnTWFIZDRvUHc9PQ==)"
        SONAR_ORG_KEY: "Encrypted(Z0FBQUFBQmZpQ2E2ZUQ3N3NwajdDOUhYYkRXUnN3WW84WEdNeVBYUm1LcjNxLW5NdV9JVWMxbUt5cVc0VHUySWNYeVhIX3pMNGtjVklwTlY0MTBDX1dVX3VQNXBlbVZRRnc9PQ==)"
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # download and install sonarqube
        wget -O $FCI_BUILD_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-macosx.zip
        unzip $FCI_BUILD_DIR/sonar-scanner.zip
        mv sonar-scanner-* sonar-scanner
      - |
        # generate test coverage result
        xcodebuild \
        -project "BMI Calculator.xcodeproj" \
        -scheme "BMI Calculator" \
        -sdk iphonesimulator \
        -destination 'platform=iOS Simulator,name=iPhone 11 Pro,OS=14.0' \
        -derivedDataPath Build/ \
        -enableCodeCoverage YES \
        clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # convert coverage report to sonarqube format
        bash xccov-to-sonarqube-generic.sh Build/Logs/Test/*.xcresult/ > sonarqube-generic-coverage.xml
      - |
        # sonarqube analysis
        export PATH=$PATH:$FCI_BUILD_DIR/sonar-scanner/bin
        sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.organization=$SONAR_ORG_KEY \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.projectVersion=1.0.0-cm \
        -Dsonar.sources=. \
        -Dsonar.cfamily.build-wrapper-output.bypass=true \
        -Dsonar.coverageReportPaths=sonarqube-generic-coverage.xml \
        -Dsonar.c.file.suffixes=- \
        -Dsonar.cpp.file.suffixes=- \
        -Dsonar.objc.file.suffixes=-
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
