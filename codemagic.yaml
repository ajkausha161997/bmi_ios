workflows:
  ios-project-debug: # workflow ID
    name: iOS debug # workflow name
    environment:
      xcode: latest
      cocoapods: default
      vars:
        XCODE_PROJECT: "BMI Calculator.xcodeproj" # <-- Put the name of your project here.
        XCODE_SCHEME: "BMI Calculator" # <-- Put the name of your scheme here.
    scripts:
      - name: Run tests
        script: |
          xcodebuild \
          -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
          clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - name: Build debug app
        script: |
          xcodebuild build -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
    artifacts:
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-project-release:
    name: iOS release
    environment:
      vars:
        CM_CERTIFICATE: Encrypted(Z0FBQUFBQmdtMlpqcUtQQlgzMDhoZ3FnNjY5YllZMmdFS3dRZ1VSQ0VKUGx1RXo0dXcyMGw5TlJ6dzVOd0w5eXdrVGxrTHF4SF9GenJ1dlVHdlM0NWNXVzlWUWxnZFk4TXR2SDdVdUdnNnhHNFRqOFF0N0VfTlZSRDZKVW5zR3VEdERvd3c2V1Z0eUhMRHJrVkpNNWFzR0p1ZzU2QTN5Z3Byd2Y1MXA3R3hNWTVkdXR4SVZTQkhYdEN4SmR4R3hlNGFJbDdGQmlXbk9IUFc0bC1Sc0ZnZGUwblhuN2dzOVNaOXQtTEo1N21aOUlMeGY2LXZTdmxIdExhZS14Yjdad2lNU1dhb19qWVQzVEVIWlVfczFFc0tsNUZWNWI0UzBHR253eEJJdEU3LWsyVjVKMUdCY2l4LTFDaUZBMDBIVjdDUk9CMU5lbVp2UF9lT19WeEhwQ3hrX1dWQkZHSEFFallTcWxVdjRmVWNrWTg5Y3VHZ2ZUQnJPVUJ2Q1hVTm8zTEkwOUFBck1xWUlsSk0tcVBwU1NUd1BDcUZSMXIxM2laTGVLVnQ5c1hkZ2JxV1psS1QwUEp5clB3YTE4Zmh4YjZIWEx2aTZBYmJzeVZrWVhSU0tGN0pnUnVmakktRXhGX19tdmtEazBoSTF5cFpfZGFMRHNxTUJRaHZfWEM5enVJb1ZlMmRCYmtRZVEtb1hVM3NHOUlXemhhV1prZm03V0pQRk9Cc0xFM1NPOUNjZExCbzNSNk9ZNGFnWXYwQkRJdnNVWXBCSVJnM0NtSFRoZnZpS0Rtd3Y1a3Rac2cwUkJ1dkdzNUhvUG5yM1lsaHg3dUVxOXpFd2toT2ZQNUdpcXR5M05jdVdtUjNoU1l5X181X0Y3X0tfUlBZbHdCS1NISHZOeEVOZnhPdkZGX2ZGdDFUblpqOUN1b2M2dDhrMjNpLWRmSUdWYmV4R0N0TjZ5WVhka3pRNnRwcEJZSlBrV3MydFUwOVNnVk93XzRyMGhOMTlod0RQVHdTSmRNZWNuNFZmdGtLS3ZCY3ROMkhxSUIyNHkzTWtMQmRJb1JWeHA0UmlHZFZVYnJObWlYaTBHTVZsLUhJelJMM21aWnI4N2R5X3BlazFwVjRTQlB5UmdfVk8yb3psSU9qQS1pRDZnZnVJVTdwb2pIODVtZ2RBM1hqQ0JFTVFKSmJraS1yNXpDWi16ZWktOTF5VHlvbngzdUx2eTByY0tLXzlERHBFRjlEQmE4bXhVWjZoX3VUM09wa2wzMG41Y2tVamEtNlcxUlo2S3FBREp3b0VOSFR5dGFpdWo2NldKR0ViRVEyNTFMQWMtcUkxN2R6TDhfWFZaYi1BSnVHYXpkRkxZTzNFSzZZVFBDUjlVSHFpYlNUeDAySzVKOExwMW4wM25td0NCaVdTbTVkejhiNnpQNFdjODVkWGxvQ256RGl3RkRFMEtuT3lwU0hYWlNtS09NOVpaVnVOX0JLbVBXZEo5MVhKejU4eE5lbjk0VDdrUHBJQU14VTBjenl1ZU1EZjlpLVhlVzNtdWJDVEVUTDFfV21udC1FTnJYNC1QLXRqQ1FZb0dGYmRrVXVNTlp0blpKdEtVc3F1ekNPOW83M0pUWVNsQlBrNXRqV2V3cnlFUEtJTEM1NHF0eHBNTzVaMHdaVnd6aU00SVpOOHIyTlBONDlBRHFlZGcybldweDZ6QWZOT2FoWVIwV2dhSVBla2xpODZjdWVMNm1YRjVHcGdFZzBfUnFfSGZCUTdJcUd6Y3kzYzJ4a25MVkhJVUFfbUZsX2taeHFEWlF0UkxjdXZYN3ZLNWM4VnB5bmVEa3A4bGlxM2xRYzkwVEQ1bzN6THFXR0NwTDVhUnh1MHNXdG1HWEc0RFpicE9rX0V1UG93X3R5dmwzWEtzR2JBMF8zMVh6bjFWVThxZEl5UnZXMG0tUmFfRWxUekdrb29MTzlUZGlReXlSbTZXSGhMS0x5NGU5QkVac2I4dXAybi0tNUMzMElpRnZXSmdVR19OaHpMNzQ3VUhOS3lnOVhnX1V6cjJsYUJRVHg0MWtTVi11clpES3NWR2Y1M05lRWEzaHE3azc2Tkd0Sl80TlpScnVqTzVJMXJZdldiWEJta004Y3dhNzBGcXNJVHZkakFwNExGVE1McUFJT2JFaUNidlRWaEh3NHBvUFBvMmE4S3U3NWMxLTNXMWQ2OXBkTGFjVkQzeEZLLUJOSVlCN01qcUN4b2VESmwtbUh5OEFwM21KekExVUJzZ3FwLWNjSEtBQ1lORWZxeXBwbWpZSUFjZ3VrUEV6YUxtcGZZTlhpQUtSNXlZTlRYZjBKV0RUa1R1TVAyY1F5SHhqV1R1cHVHUEFPYnlHQnRsYUktb2p1QTI4RmozZWlZR0ZieUtmRVlEVjFrdDRCU2Vhc3dWTjhRN1RDUl83RWFESTcySzI2WkRDR2hYdlBSWl95dWZ1ZmVpUG85dFFlenlrZl8yclFkNkVKTkpTbmFKVER4dW05aEs5WkNreHAtdmh3NDIxT0cxMkVGZXlVblRIMzZRanFja1EyTk51R3hQaGVjSWo1SXJLNURETG03YmpQZWt2SXhsb0ZhcVB1YVNGdnZhdy1kRWNKdlZmd2lPTlRhNUU5VzFGTjNaY0Y3cnF6WmpXRnIxcUZxeTJlbERNTjY1UGVKYjNfMEhjSi1sYmNFaFZOdFFzTVlEVlVFY0FjbWRqbXRFOGVwUl9lWGU2S1lTaENqUTJzRzdqWWR5U0Y2VzNaOUQydW8zWkt3aU9lcWI3a1RoYjlIeEh1ajZJS3JWckFnYUhlODF0b0lyVURuVEhXY3Rkc01wSi04OEp6ZVNCLTBRd2VBd2lGOFkyekpidDhqQm9iS2N1SFVpeGhRMEhXWms0QnJ3dnpkb0t4NWYzMzdacjZHOVNNclU5cnI5TmVFVWlNWk5FemZzOHFBWUdSbXNXcVhtaFVpWjB2Q2liOE9zcW9tVEdjUWxPT2xpYXNFSWRnRUpFVUxWMnhDS3lwSnl4RUlUVXFMN3RLYjMwaXNBblVWNm5jSWRXODRHQnVtcXZtSUFjN3dsWTBYTTg1VHRnNnZjNWNFNVA1VTQ5NE5RN05lV1dYSFI3UUt0TXFUeUVMeVlvdG1keDVjU2RILWRYRUk3OEpZTzVCVFRWV01MS3ZLY0tweXNGbGEzQlo2LTIwZ2ZpdXF3NDdTZF9wTmR1bk5oTTJ3R2RRaEFBbTM1eWs0UC1PcklDcU51bzE5UllwcVlKVVJzZUpRRXRFUFQtRGJBQzB2NHpuemFmWl9SaEVVSTJTTTctVGxwOTlTZDRDZWVvZ2t4TnZINkVuTDFZQVFJUGh4cXpZel9nU21PRlVkUXBUcTJqOWFJT0gyWjJMUnVtd0VDclFfTWlVVXA3Qi1ZNXNhY3NYbTZQQ2JNRlc3OWVpc0pKaGpWYjdMd19lMTg1eHF5Sk9KTHR0azU0TzZDNHFUMWQ4V0UybG41Q3AxMDZBVlpkdzR5UUQ2ZXVFT3V0VzZQNDM4WkpRaF9VTUhUbHhSX200WmMtYWlxaW84OHNvVXdHYUhYc0p6Zy0yS0hhandYQ3RTUjNXTXpkS19mOUROWUZERDNuZk1hYWJFR3dfVGJKeVNlYXlTTzlNdTVQVklyYkxqTzZLN0dxWTJ4WnIxVGFqc0lsSUgwUEgtUVdNejZiQWhVVnRkdS1ZYVQ3dFZaclMyX19xYjNMcE0wRng3cHUxZWh5NW1QTFFfTzJMTTFhbjM3LW5wbUVMOWdiazhLb0tJbDAwRFVUV2hHb3hLS0lPbFhhdE5iQ3FIMzJqdy1kdnpnaTJ1Xy1EWnE0d2tHUHZiUzMyV2N4b3Z0OXFpU19vVmg1WEJUUTRJWGhSQm1Lb3VCMlhVaklUZUU0d1pIR1IwVFY1SW9aUl9taHVNOXlfWHR1UkVhOWE1OHJXUTBfZFBCR3QzNkliUjUzNmVKc1lMbEgybkU0M3dnWUxKalp0RlRtN19oYXRjM1VrOEZqOE1zQkhWQzJHU3NLUEc5aHE0dlktU0o5LUVVcTE4MXdhWnBlUElPcGxqelJieG9hU1dWZWlCZ3VpV21NMjFLVWM5NVlxZGo0a0lxQ0lERFlhTEpvQk5IVzdyV0pkakRQMnJjZEE2djgyVXpjRWZtOFJwZWg3ek8tNmpQZW1ZM2QxOElxLUp1N3lnME5hdGEzYVB4SzYxMXl5WVRBbU03M2NhYUo3a0xmMDFid0YyQkJMLWlTOUx2UDh2SE9zZ2l4Z3lyN0gwZG52WEt6VHVvV1JxeE5kWVI4QzkzRGF3UEMtRXpCUWNhZUJ6Vy1tSEt6RkxyVnhZQUhSTU5FbjBCeTJ3VzB3UmhiWHpSUGZyRHVVVkJfVHdqMEE2REMyaWdTdVVYMk1vNUpvQlY3bWEzYlB2ME1RckI4UlMybzQ0M0RjaE9aaS0xMk9oQ1ZKNnlENV8yanVMQWd2SGlsZURCbjF3QlRyLVhGVHBmbWs0ZGpMY2tFTEJkZnNjLXJRUHVCUHBuejNFV1JjRWx1ajlVM3dWZEI5TE1YcUdCQ0JpSGpOR2tQSEpVZHhSSEExV3VmbkV5RVVwMkhOLW1KTzhObFZ4V1lRd2g2QkRHOVhEM2xVWGtqeEVOZ0M4bFVfZjdGNFpGZTk4dWFaa2wtWWszRWc1WFFZTXdLV21DUXhiV0pJa05pRTFaVnk2UmdUWnMxWlZCcmlxUkdBaTZXVDViVWU0dldfTDNpalQyVExiOHlreXNRY1M0aVE3dTVCS3lKajBOVERzVmhFdEpNQUQwVFRJaUxWRlNpUV9td3loWUhqdUktbG5VRU0zWjFka05iVEhuYTFadzB4Nndvb01RWWo1Yk5KRDZTdGF5NkNTeUpEcV8xcnFvbUN5QS0tbkxGemJ1Y2tOTlFrSXdMM1RoQTV2eFFNX0lPT2JDWTJxcVVzcnc4LXJtdm5jV1FyckdkcTdPQ3F5MHlrZ1laemQydHgzNVpmeFNKb044NmQ1VWl2QlBVcndEQWJWMlI5WDc0WUhsdFU1U19fcjdtTHNUdThKYUZIYUlXMWw0aEtielFJbE14UG9mTjAyUzBYTm5mQmZ3OXN3RnhXWWdfcUJfYWhYeUNtOEZTQlNtWk5NUVozRHpaSUhVakN1TjFWS2xmNmNUaUNNVzJZZE50SzBkZ1UzV0V4elo2NjFLbDd4STh3Ulo3MXpnRUNEc3l3R2YyZXZsV1JPbjFQRmgtUzJQanJZWGRMbFFzUjNhS3ExNUhBZXFROTlmLTNtTTBDbURNS0xQaGY0eEExMHh3ZEV2NnBIZnFDTXVXbDNUTU1HYmZNODhUVGRZZHhoMzRWNHF0cW9vXzFGMF9XcTJXVmFhc2VEUFRmVjc3UXBhT0kzVGw3QldxNVJQSG1vUW54MWNKVTZUUl9QVl80dWNrMlN0OTlsZVp2WG16dnlTNjY4dGFzWnhKVTJ2LS10TVpweTJ6UzBtWEpHSlczdXhmVGNHWTdMVURhMFJLNkdUazR2TzNQaDV3Y0FGaVFTdXExTUhnRjhxTHZ0d0RXNVoyUXZMWlJ0dzZYOHFqOVVGVWdhZmROQmgtSkNfRUs3MTQ1SzRtUHpQM2l2LWZqWkVpeVlvN0IzVjJnN1E5bmpNMDB3UDVfa3psYlV2dGtqN0lYeDVoaGpncWVsU0QwdnEwXy1iTkIyTDhPYVBKSFJ5TDRjTHg3aG82THJDVkVJSEFvMTllelNSUjY4OS1tT1l3UnBMcmFxOHBZaWw5dmpPWjcwdkYtckVabk83dWJzb0o4OExpY2N6OEg2RGxMQ1dHYXk2TWFYSjdMbnFPdm5XN0lOaWpnR19INlJxV2xVQXJfbG5BN2ZtRFB1WVc1OUxVV04xMVUyaW90SUx0NVVrTFdZR3dTa2xGT0llTFhFNE9saDAzcTFBOTllQXpRUkRTdkxIZVRxZ1ZON0JhX2hKMWhVSkdYcDBQSlJSSFhBOEg2T0hwZGxESHBuLXZ2WW9pekRtMy1OeEUydXhNS0hYNUktVWlLb3lhT05aQ3pwRlRrMkZ5UzZsVVFja0FteDg1aDFLYzBvUmtfUjExNlBkR1Z0VUpUZ0pFOUxMTnZUTVJIOVJldWs3NTR2WS14cE5TeHBZam9Ga2VneVVqb2xKdzVFVTVTWEs1V2JneDdPbmY2R19BTGtPRTM3alB6LU5TamJvMk1MN0ZabV80a3poMVBnQ2t6enUwUUtBWC1TVVB1SmZMb25SQTVCUTRORWMtdmR4RlBQR3FqNEkwcmt5UTR0YlVJekhDWlBTSGF1MHNPSUI4a0ZHMzQxcG5pczZ5LUpvTFdLcFpXb1Zoa3dGYmhJZkt1amZTMWk0UzViblo1QlJ3OFEydDBXTWZ1MG5ueHJmWkJUMkxybEQzN0pBRWZmenVrVTFmR0RmckVFZlc2QmZ5bDNiUFBmSlpkanJUOFA1Y3BTNWIyVTNYWEtqa1RFTXVjT0dVdzZDeFFDeWNPb1JVRVhJRHFzYzREaWthNHVCbVFlNXFGakZGdWJwN2xUOVZHREc0dnJ3TDhKWWFCeGFrSVl1cFRkSC1wMWQ1enMydk54TG9fMGlGd0RRUGF5ODljZWtkVlFGcmloT2tVQUtIb2JxRUNFb3lxbHlPNFQwOXpHT3B4dVRNUkhWWng5V1RzaS1oS1VxOFRCN2FlMDJBYkluM0ctVnNBM0p1QmV6cWRuVlJ5cnVVOUgxQUR3bGxRQ2tuUVZnTlFkZ1ZkS29mcWs2eFlNMXA5WnpOX2UxeDdDZWNrMXRIbGlFdEFhdHFmZ2pYY0xIeTJHMDdYRW1iREo1MmhCMklQa21vMExhY2NVbF9hUjZJSGh3aDdNMm5IaFRXQzdCMERCZE51eE40NUR2NzlXZlNMUTBQbEhaN1NiSEJfU0x5TEpZdmlqQ1cyRm1saEdnd0ZZVTA3SnBlblNJWUlrQjd0cmdQM3BmYmVnUC1Xa1c4c21rUWhadUxoT25mdzVhcDVHdXhrQ2pYWUhib0RNbGZ4Y1h3NWZpOE9EdER3THVjUzAwNXFnMHNRa0h6QW9NS0QzRlNkYlpjY2I1TXVQRzF3bEY0R1FOUGlfVU54VDRhVmZBVjBtTS04Tm9tdnQtSEFlRXN0MGIxWVIxSENOYnVkYWlNTGdUSUNzMWVyUWdJZmNwTlQ2QUF1Mlo0ZzZsVVdOcnRjZENrTmRrMlJtUzJwMm1pejhvMFR6TjZyNEFhWGdENFdVZTJmSGExb0xGMEs4Vk5lbE5pZW1KNXg3SjZrZWFrdmpSempyM2R5QjZVSEVvVlhTOXdqYkEtVFV1UUdHUXp4cGlWWG42cW1HdVRsX1RzdXdXdmJURWZaQ0xDVi1zandFTWVQWkJuRjlFdlVTbmpTNVNhS2FrM1JCelNWbFdWekY2WmJUUXBGZlhVTWN0elFSa25GX1lwMUwxRHhkT29Gd255THZKVFhzdHZ6RF9JdVJnUkdrM2ctQzdGY1FsWGZOSkFBbjBValA5bG83Tm9EYUlJVV9IaXNXZ0xENXVFOVlYbVcyMmNISjd6a0Rvd1VaMERhN0VuR2xWYUdacmF0Rm9jczJ4d0ZDbXZXVDNMeEMzN1h6T250S21RNG10YTNTc3FmRllHRWdmbzFLS21CM1JQM0o5Qkx6WG9HYkdpYkJuVFVuOUJJWGRfNFFYVjBKcG5NUkpTbmVsY3lMcnNLMDJ5UzYwcDVBeEt4MjJyaVptb0M0WHZtV0FLQkIxM0Z0SUhGZFZ1ZEhBSjIyNFJocUd5WFRPdktNY1psQ3NweHROT1p3LWFYOFdKVXBsV3l2M1FISHJoUWhGVlZGeHVnR0U4ZW9SOF9YaFNuUWcxLWVlc1ZuMmpnN011WWd2UWpVRnRTWlpfemo0Uk1hcjUzZkdvY21VQ3BWV2ZvWGU0Tm9IWmlmZC12VVgyYXN0NExRb055azNKUjBnVEpYdWV0RVM4Zz09)
        CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdtMmFpRUhVd1pudVM0enViRVNhNUtKNjZMbmdLWjYxSlp2SG1mWmZ2aFFweTJfS2VKY0lZOEZVbDZYSnJsSVJ3THlublkyeEhTSnJRV1pjOHZtQU9HWWlONWc9PQ==)
        CM_PROVISIONING_PROFILE: Encrypted()
      xcode: latest
      cocoapods: default
    scripts:
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_HOME"
        PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
        echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up signing certificate
        echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
      # - |
      #   # run tests
      #   xcodebuild \
      #   -project "BMI Calculator.xcodeproj" \
      #   -scheme "BMI Calculator" \
      #   -sdk iphonesimulator \
      #   -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
      #   clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # build ipa
        xcode-project use-profiles
        xcode-project build-ipa --project "BMI Calculator.xcodeproj" --scheme "BMI Calculator"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-sonarqube:
    name: iOS sonarqube
    environment:
      vars:
        SONAR_TOKEN: "Encrypted(Z0FBQUFBQmZpQmtjU3JxNFJMOHBNMXYzZV9yMkZpb1p0Y2NKQ0pWbjhiNjNRLWhzcndDa2NMRU5teTVtVWlpYlFCTnF6eHVLMlNDaTVVQWxERHJGb2JRX0tZSm5jOUtmQUZ6Q2FVQjlzSW43VGE0WkZYdzVuOHVYSHdkSHdTOE82MlAzVXNoeEVPSm8=)"
        SONAR_PROJECT_KEY: "Encrypted(Z0FBQUFBQmZpbVhKVXc3eldWX0t2am5jWG1MU0RwOEFJVThkMmdZRHB1YTZDdkhMcGFqaGNQR2plYWNmYkd0UkVOZFQyZWtkMFhIYXVnN1RyWkd1UjZPNGRnTWFIZDRvUHc9PQ==)"
        SONAR_ORG_KEY: "Encrypted(Z0FBQUFBQmZpQ2E2ZUQ3N3NwajdDOUhYYkRXUnN3WW84WEdNeVBYUm1LcjNxLW5NdV9JVWMxbUt5cVc0VHUySWNYeVhIX3pMNGtjVklwTlY0MTBDX1dVX3VQNXBlbVZRRnc9PQ==)"
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # download and install sonarqube
        wget -O $FCI_BUILD_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-macosx.zip
        unzip $FCI_BUILD_DIR/sonar-scanner.zip
        mv sonar-scanner-* sonar-scanner
      - |
        # generate test coverage result
        xcodebuild \
        -project "BMI Calculator.xcodeproj" \
        -scheme "BMI Calculator" \
        -sdk iphonesimulator \
        -destination 'platform=iOS Simulator,name=iPhone 11 Pro,OS=14.0' \
        -derivedDataPath Build/ \
        -enableCodeCoverage YES \
        clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # convert coverage report to sonarqube format
        bash xccov-to-sonarqube-generic.sh Build/Logs/Test/*.xcresult/ > sonarqube-generic-coverage.xml
      - |
        # sonarqube analysis
        export PATH=$PATH:$FCI_BUILD_DIR/sonar-scanner/bin
        sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.organization=$SONAR_ORG_KEY \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.projectVersion=1.0.0-cm \
        -Dsonar.sources=. \
        -Dsonar.cfamily.build-wrapper-output.bypass=true \
        -Dsonar.coverageReportPaths=sonarqube-generic-coverage.xml \
        -Dsonar.c.file.suffixes=- \
        -Dsonar.cpp.file.suffixes=- \
        -Dsonar.objc.file.suffixes=-
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
