workflows:
  ios-project-debug: # workflow ID
    name: iOS debug # workflow name
    environment:
      xcode: latest
      cocoapods: default
      vars:
        XCODE_PROJECT: "BMI Calculator.xcodeproj" # <-- Put the name of your project here.
        XCODE_SCHEME: "BMI Calculator" # <-- Put the name of your scheme here.
    scripts:
      - name: Run tests
        script: |
          xcodebuild \
          -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
          clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - name: Build debug app
        script: |
          xcodebuild build -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
    artifacts:
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-project-release:
    name: iOS release
    environment:
      vars:
        CM_CERTIFICATE: Encrypted(Z0FBQUFBQmdtMjdnOEdRcGkyaFNCNksyeTRRXzh0Y0dfWkFTMmdzc05kRW5QR2xyUjhycl9EenVUaERkbDlKcFFrSEpKSFFSNFBQeXhLUzlndUtfSHRYUlhLSGFLLU9Ob1VHZF9BN0d0UE1sR1dfTkQ1ZEFlcUNtcEE3a3pULXZVMnZNdzZSam9HTUNMU2I5S1ZCdVB0a3VCVUlpVUFvQzBVZldoQ3F6UGZkaUZudTFMYUQzUU5hb1ZLT1o3dUdtUExyR2VWRXlOWUxTc0dIYnJnbE5FdmYyTXVxYjlISFhzRHNNUXZvSFFFcno4aXZJWl90NDlSOVJQMUtBSDVCSTRNQVF4cUVhVFlWam5aYlNOUVRONG1QN3hUbURQTy1SNUU0RFEtNFlkSXRhSkJQcjFGaDh2OHViN0VlR0l6c2lwMl9BcEMzd2p5dGR4ci04SFdwMTl0OFdETWVDMWszc2JacTJoS3pTZ25Sa2xQUWZqNWdjR0F1dm1xZXJHbFI1d3B2US1KVzdBcGNvTkswN210WFNRajAwS0g4ekI2ZXVVbUtCN00wcHhTT2R6WkhxcWNnalNubTBxaTFDTTBZLUNNTi05aXZuVUlBN3pnVjdPNndrd2JwRUtPR0htVDNmSDdjS0ZKa2FlUjRxYzhjTTBVSnhxRGNlaHZRT0Jma2g0WjViejMxeWNXYkR4MXc1Vk1GYVhKSzNmTnhFZEtjYlRLcUpUcDZUMkstVkxSdlUyLUpINmN5MkdCMlBPc3RsczJEeUJ5NFpDa0Z6UGMwRjBIUTIyX0wzMW9iaVpqWEFDVUVkTVZna0NpZVdMZUVINjBOdnA1Z0w3b3NVNDNSMkVlT0hpTTV6RTFsRlZxSEY4bklRclhlX2JuUnpTVzhrZThEbjNTWklROVdET05yeGI4bWhzYVI1ZVlfTkNDRFRIQkVVb0NyUndDT0tVVW1mdlE5WFlmTXQ2Qno0eTgyVDA0dVh2cXplWk5sV0NWOEtGLUpLcHZIOHdPaExHc1QtMXRXdC10aHRxeW1Fdy1kSkhqQkF5LUg0WkJiMzlISlkyZmYtZmdFa0I4ZnY3Sm1NdXdLaXdvYkVqRG0zREJaRTRPYmkzX0EybjJJd3RkdTdYQ05tQlFmWVlPUnpGWnh1Q2tzaEZURDlra3Y5d25ZbVFfVEJUMWlLVVNNdDdwX3VwSzJoZkFnUURpOUV4NEhsYXJXckRGV0YyODBrU21YX0l4RkxzeHhGbGNMamFHZk9MSXlVVnZLQWZfODdpTThCcmxNSkFzd000czZKVmYweHBvRWhZZzYwaGRKR2dTQVk3alVKUTBFY0hUTkxJVThVRTQzRzljVF9KdVBuTS1jd2lrdVkzQkdKOVByUTRVRVAwZGdLUVlOT2V5T0paZVJVUHB3UjBJNVozUXlsN2NJbmNhcmp2Nmtab2JxVjNRSHhfTTRLWTJ3N2Nra0M4VlRxdGxUZ3NXblBNLUNmSnNRdFhCRU1xQzJYbEhYci1UWUV2dFJOckpvODlHX0NiaEVUVnFiLUZFemloYncyb1dacWlpemM0amxYRFREVVBNWlB0RE5TV0s5REJQWG5FeWV1RFdNVi01V2U1c1JHNXhiR1F0bDU2b0I0VXJQTHJfN2ZfdDg3N0tMMjhQSFVhbTVobHMxWUw2UWJWZzIwVU5CX2lnOEtlSF9oNDJBNzQ2Qy0tOFg4NUpjaUlpSHcwa1V6akVDai1Wc3lCZVpwZ2V2SGtYZmZVMU8zV2Fmb0tvQU1hTDN5LUljbkgtamxfbHdHQ200SlFONnVybi1RTEhhOVdjNkgyYWlWeXQwNVc0QVBrbVp3OHE0bkxucmJramlPMW5Sc1R5NlJENXBwRUFuVjNrYVd0RkhaRXdtaFVLX3oyU1FYUFFmTUs0ZFpMQmpLeXNwbnJXMkNMV0NGcm1WZ0hKQmhNRmFVaFZQNGVMakotYUN1d0lkWE05RW1TVDhwOUduVVdkM2hzLWpmZlRLNlNlUVVwY0ZRVjJSMm5nejJzaHZzV3hkeTFwUVlpaGRNajd2SFozaFZwcll1OExFZ1JuNWgxZG1Vd0R0MVVMcV9LdFZQT1pvVHVGMDlMQVo1MTBPRi1oYUJtWVpqWnRHWmc2bnVJRjlzVFcwQVFfdWx3MThBQ2JqeDBieXM2amNnY1J6TjN0b2xpZHgxaWtQQm1LN0lJYl9xOTQ0WGQyTzdpd3pPNnNRemZRUzBQdG03TTg1Wndtb21oSEtiakRIbUFqZUQ4SkFCNUNkUnhWYkpmTm9sNUVpakRpd0drZ0V0UWNYNTJHakxmbkZ2OTI3cXVBV0t4V19DZlFPdWtzS0NxWWlWN2toQUhKRGZoU1RIaEdJZ0UtdnR3SHVSRWpocGl6S2p4WHZUVm5PTWRWcXZPTzc1ZldWb0NXYnNac0tEdERNVWg5d2gyTkw4WFk3R2o5N3BoVEliaC1veXpOLV9NWlFZa0dtbkFTRGtCLXUycnRCbmhpdEluVzNyZXM0NW1Vb1BaTXJ6aFgtc0JfYVpQOVREUjJjeDJMSU00VVRKY04xMUxiYzByLTd0bHJfbERQSFVoNzI2OXVuOGdBNk9UYVhvam1KUkdERExXc2t6ajQ1Qm9KYlJlR3VsX3NWUVltak12VC1vbkhMMjRDOVdfcjdFSEFnOVZMWFpWaWJpY2plakZCZ21yQlJJZUUyUGpTQU9LWmg5Nnc2N0l3MHNsQlZ2aEdTSzdGQ2lXUWVzcUtDX2RvSEh0aktvV1FTck94eHd1cTNaZEVZTmRiSGZEMjR4RklWM3I1OTNqSmtBZUhrOVVsWndhQWttNEs3djBTaHdFTWtFUGY1VWgtb2pCcHYyTUNRbkNfWU5WbTdNYUxwT01MM1VjSGhyZjllMkNMZE5UV0NZbnFFSVJVRFJhRkp3a2xjNW1XYTdRR0plcnR6eS1tQlRVMzZCZlpQdVF4SExVNFRRb19oRHVXWDZad2RLa3I3N19Rd19WMUNCR2prZm0ybEwtQ2x0U05mQUhoNHk1Wm5rc0RfTmFOUVR4MF83dVQ3aGRoS2JTeXpnN0h1Mm0wUE9vbzB6TkVsekFINjdhYnpMZ1Y4cmI0YjZQaWJaVlk0VnVneV9sanNUd2VZckFUQnJxZDlFd1ZleFVkaXNhUDdtejhZMUVsY3gwT1l0ZnJ2RHlpV0dUcGdiclRyRWtDcDVtc1hMVHUyRWN0dFZ3TER0NEM1MEwxdkpIQlZ6MjMxaWlFclE1Y2o1Yi1jb2QxNjhxWkVGQkNSQmRiU2JyRl9lVjV1ODhIUzFTVGk0Tl9CUDVJTlk1UHZNRGVydTRJajdaaGlLQ3Q4cXRjSlZQcWpQd0FRSEFtNnlheVNUYTV5UTc0dGNTLXk2cWhKZ3JNQVdBaG92aFF0YVpJUTVpeUhQZE1pMV9lWVpDVXZlMzhlc19rWUluU1UwVmZ6ajE5bzlRQlJNSXU4T3BHWVFTNnU3NlFTSUhCY1B1alRENU5vLVJ2Ul9Tek5DQ04zdkhmTjAzcXV1Rl9ZaHZ3WW5YenBhb0tsWGp5YzZFLXlKanYtM3ZGUEdNR2dGTks2NnQ1NlRJNzQxMUR5QlBRWjdfV0tEZWh6UFBVWVlWZEVpZFpZeGRHNlNxQ1lrRVhSeU1lU0ptaXczdThKM1J1OFRJQTFIM3NQQlEtUmxPWjB1ZnVNeVNYVXU1WDVLSnJ3a05nRWx3S2RqRDRUVC02Sl85Rk9MMVNUWGN5STNreFdnN0t5Q0l6ZTkzWnZqNEtWTUtQNHdHaTB5d0ZvWm84dWZKQUFsUWVPUFlUX2them5aVVZlS0t2YVduWjhaQ0NuTDNBYUtHekVnczZQLXRJbGc5dW5kRnpNcmN1dnpLX2pWUXVLb2xnQzZ1Z3VtVTNMQjZCN2wtVGl6ZlFZNVdHdEFEeDFQVHRwLWV1WmNNMUZWZ2pNM3dCV1B2SUh4T2RKOVB2WGQ5S2VmTHVjcE1ZV1JIZmlBSzAxWm9JdlBUTHpNNXNodi1EcUdzZUFIWGtrMXo4UXVfak82M1cwTUFXajJLRG9GSEowblZjaDRuajduUXRFQUF6NjUzZXJHcUtCXzc5YUlNRGM4RVQybWxlTmpmS25WRFlZb3FMZk1FZEZKOTQ2bjIxUVFnUWw0c2xhcVhWVzAyWUpWNXQwQjZfdEVOSU5kV3VmZUhCaEc2NHNuZVdIRmVqaExKWDZoSzZOVkxSUDRKNnlWOHVMc2JhUjItUE1yTGd6OFhMcDFvbmZFeVdmSHJ1emdXVHdBTV92WVpvYWtnQjJzdVZHd0Z4dnIxWE1WbDNnZXMwMFJiNjJWODkxUnNvVGxMNFJIdDVlaXZ1MmZRRWRVX2Z6RFFvQzB3UFJmUG0xeVJfQmcyS0k5YW9qX2JzZGhvRW16QnFCSC1FOThHZHgyQTNYUE12Q0xRaWlTTlh2Q3A4TEx6enJqb3JoZmZ5Tmp2T3VtZ0hmaW9nVkIzQ1dhNmJ6NzFZQ1B3R0hya0FpS3BveHJTbFluTFUxTlBnaGp0dE41NUlZX2VHMjJqU1NpZzBITnRxemtvOFFSdGx3a2NHeUhvd0NkUWVMR1pLUUJMbUtROWgxZUgyMzJmc2dNbHpCWU5lZlduc0Y5ektyeW1pOUFWRzU1Sm5Ea1FXU21PeVEzZHB1TzFjRzNyTHgtX1dJem5UOEgxS0hxSnltR1lKVHhxbUhjS2d2UUg0NUZpdTIwWVFSZE8tM3lWTWVKX0FnbEoxdHNSWkEzLVE2SmZ4ekktWTZ2cHcyd29iOUt6d3FfaVROMVU0M3duZDJkYlZReXNmSjRGVklxWTNFSDlsNEFzdmlvdm50cFVqcjZNWEo3ZHloeVNhYmQ0V051QmcybzBuZ3FPVlBhazlFVi1HbEt3SG5BczdwUXIzT09CZVhtZGd2WXZEZEktSU9zcjJTUjMxallMOUVEYmY0VFdva3U0ZExVTXRFcjJ0SXBDWFc5R1FPRllQUmNiVldudG5JYm54YjZlN00zaklFNUozeXZLOGVFUTdUQ21SV291X0ZOb1RNT25OX25zSTRqaGl6enNVZVZsVEhHSEp3dHlvczRnQjBhdTUyZ0o3cDctYklmenFReVQzV3VCaTIyX2dFcEE4N2M2dE9ISF9fRTlDR1U2dUxNa0JvYVVxQm5RNmpSa2xoZE5hbmRLTUstUDRQUjFraWx4Q1U5T0pNLXNYQ2E0RGhJNjRZd0RxU29zRDBzMmVsS0M2cmhVVG1naU9MTml3OGxvbGpCeVc4QkZNaDJMRXVsTFhJSEpscHFNSFhTSHJaWFhTUmVOajFoamRWWHlwaGJlYmdBaHhuQms4dERibFlHZjBRNnF3dEY1LXRLazE3Z0Ixa3E3bjQ5V2hhSHhlZkh5NHcwNUFFV25oc1l3WkdaMWt0NF9sZ1lxdTdNNzVCSWp1NDBCaFQtUGoxd1lBSGVzaEI4MWs1QU9uWnA0UkhBT3FVb3NnOHIxYVphLXF3LTJsQzRpTC1hTnFuUU15bjBXRzkxWE1OQk1hQWVaNlBoU2NGQlNwQzNSYmpfd1pYN3Fxa25zN2RnaFVUV1FXaXJoZDYyUUthSTBiNWozTF81elhTTHgyODh1SjRvSkpWbEpRNmJJbEV3cXZIWnZnNFo2UE5tZHlqMDhfR3hnUEZvM2xCem84ZHRTVDJiOHRRVlBxSHAwaWpHZWRWUVhwdkt1amo1bG1yc0pzN3pBVUlvSmVuRWdqNWFUczBRLThWQVNzeGs1c09Ha2RKRDV2MlFGTlVERFl6QkM5T2Y1eUNFUE51SDZ3X05SVjRWYlhSWGxlemxmamF3Nkt6eVkxcHBHdExkQnd6WHBWdVpjNnZOQnFtNUNnQXpSM1JBdmdsekdfbGJodUJYaWpiSUU2UURsYVRfWFUtZkZKWVV0RXVfenkxS01meDU3VlFTU1R0VFNMS0xtam15SnRqalp6WTVIVlpMOGZNdERYMjlGRmY2N3lQVnlkdGVIck14bWZaSDFwdzh4bVoxXzVPT2V3QVltV2toYlFOcjlBVkxnSnpvSGpMM3ZyMnoweTRfbVVhOFlnb3RnXzJJbC1oeUhSZ1FEQkVLeHV1MU5DRFUxc3h1YTdQNzAtWnRVWmVuN29DTnpHdXg2aUx4NURZSGNKTHNZbkFOZzRhWXVwT0pMM2VBcVlmUm51X0lBek1SU1ZoY1dOdVZTci1uUl81OEl4Vjl0Q1N5MFJlUG1BS2ItMWEwQmFTZmVicUFuSnk3NExnTXBnbDcyZFJ4aHhLeFRReDJpcks4TlFjUXBGUEd4TVBUT3JwcGE0bjZkV0lQcW5QNXZLb3ZfZ1ZNQjJPT3V0WWRjR0s3d29yUXJwRzU3OXNOX2tNTnZOeWdEejBnMVg5SS1RaV9uOXFMNnA4ZHFzbmp4TF9qZFdJcm1SejBRdDZ1SV9OWFY5UUZiS1JnWFZsSXR4emhjNmxDTkg0RmZLUzVYN00tTGdGdDA2STl0R2R0LXk2cHYwWlRwUm10OURRSGEyaXM4bGVGWGN0a09kbFQxTlQzczdoWHEtMlM3ek9xajRTdTJITHMwNVdjcldTVzVIQ2lDUHVxVXEtSTh4SEpSVTlnOVZ5SWVsY3R0SW5BUWlBN0xobURTRVBwdnphQURHVldiWklvTmRjc0RFYlJiZTV6dW8zS09rVTJuZUxrRUcwRFExekZOQkZQalZpdHJVQWdjOUlPS2x5dlZ6SzNjLWpGM3VVX0FUN1Y5UUZ0aWlnSXQ2bTBJcWp5cmF3a3M1YzlaT1pCamZvM2NKeXVBQVhlWmtzRnVQSVc2bXM0cjNMMVNWT05zLUVJZ1VJREdyeUJMaUNyTmpYWS1FM3RCaTFqM0hxWHotTm5sMDNOQVpHdnlUbFU2c3M0dnMycEtSSklXOEQ2UDRfVjNucjJNcTg5Q3NDQzlOMXlYTlUxZ202QWR4QlRDSnE2cWV5ZTdnNEZuczMydVlVSEJnRTlaUDFYSmo2V3Z1amNrY0w3dnZDdndIN2FWTG16MEtMUTI4b2RGOGNWekwxTkgycEdVU2dLRno1TVNaSjZjNFQyTTJhWWNTSjZmbW04SUVtYWpLT0oySzBRcHlNMHZMOUZVdE5tRXZfSDdVeTBOQk8xcV9lRmF5MjZZOGJ5VDRBRW9JcjdhSVMxaG84NFhzeXN3NFg4QzRBV19RTWdVRmY2TzFGYU9YLU4ydWo1UENlUmNXTm14WUN4T0VKS1FoTUJIVThOMnF0Zjc2NEw1TTlpeDBZeFZ6eUQtLVRSdTBUV3pIY3FLYUptOS1BZFMyRlF6UERna1NmcEVaNXFyVHExMkNBN2RsWG9KZ2JCSGZ4Qm5XS3ZLck1IU2xfdE1aaU9iakx4bHBVSGV5Q2J5X3V3QjhmVndQZU5XSlNpVWJURnp6QmRxaUYzMzk0SXdjSF8tODlHbWNDemluRTJZRTJjakZzZVFGcW1DT19meGdocWw0S3cxeUpQSHM2RWFXTlY4azRMRjViTjBlMXdZdWl4ajRmZTEyQTVjaE9PUUJ6Y0Q5NHhZVlE2TEhDNmN3dkMyX0ZOVlFXWVY3Zzk3VzFVRFBWTmd3eVlxemF3TVFvMEhiZkdqdU0wckZDSzVJZUdTVjVFcU04UlBVY3N5MUpHa0NMSGU5ZUxmbkt2QmI0M0xQQXJBYWtlTGlaaGNTa0kzWFhrcGRfU0pON1VpUHlmNXVaN1FpdVBycUhyXzRWTzUtZEVBejdTUkhMNWp3dnlzb0NJRUNxM05SU2lEanJjTi1zc3RIcXpBbDJMM2F5UGVZVGpleHBhTm5BMFRIQU5maXJILXhybjc4S0lDNjJLNC1JQkx5SkRobTc3eVd2RlY5UmpTeENuVE4yOGJvVjJTZmdfenE0S0xaMVZGUTJZVklhTmtBejROMDRrSlh0QmlLSk1RZ25aWTQ3LXdYX2dnN01iNW5NWW96OWk2UT09)
        CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdtMjc0NE00X0JZa1ZYdHdlaWJtNDNVUTMyeU13Y3VUcDlwY3JyaW90ZEZSYUZ3eGpsNEExM1l4Rk8yXy1mTXVueHJiY2tRcUpjUEMtdFVhdkxkczRBemozcmc9PQ==)
        CM_PROVISIONING_PROFILE: Encrypted()
      xcode: latest
      cocoapods: default
    scripts:
      - name: Initialize keychain
        script: keychain initialize
      - name: set up provisioning profiles
        script: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
          echo "Saved provisioning profile $PROFILE_PATH"
      - name: Set up signing certificate
        script: |
          echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
      - name: Run tests
        script: |
          xcodebuild \
          -project "BMI Calculator.xcodeproj" \
          -scheme "BMI Calculator" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
          clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # build ipa
        xcode-project use-profiles
        xcode-project build-ipa --project "BMI Calculator.xcodeproj" --scheme "BMI Calculator"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-sonarqube:
    name: iOS sonarqube
    environment:
      vars:
        SONAR_TOKEN: "Encrypted(Z0FBQUFBQmZpQmtjU3JxNFJMOHBNMXYzZV9yMkZpb1p0Y2NKQ0pWbjhiNjNRLWhzcndDa2NMRU5teTVtVWlpYlFCTnF6eHVLMlNDaTVVQWxERHJGb2JRX0tZSm5jOUtmQUZ6Q2FVQjlzSW43VGE0WkZYdzVuOHVYSHdkSHdTOE82MlAzVXNoeEVPSm8=)"
        SONAR_PROJECT_KEY: "Encrypted(Z0FBQUFBQmZpbVhKVXc3eldWX0t2am5jWG1MU0RwOEFJVThkMmdZRHB1YTZDdkhMcGFqaGNQR2plYWNmYkd0UkVOZFQyZWtkMFhIYXVnN1RyWkd1UjZPNGRnTWFIZDRvUHc9PQ==)"
        SONAR_ORG_KEY: "Encrypted(Z0FBQUFBQmZpQ2E2ZUQ3N3NwajdDOUhYYkRXUnN3WW84WEdNeVBYUm1LcjNxLW5NdV9JVWMxbUt5cVc0VHUySWNYeVhIX3pMNGtjVklwTlY0MTBDX1dVX3VQNXBlbVZRRnc9PQ==)"
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # download and install sonarqube
        wget -O $FCI_BUILD_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-macosx.zip
        unzip $FCI_BUILD_DIR/sonar-scanner.zip
        mv sonar-scanner-* sonar-scanner
      - |
        # generate test coverage result
        xcodebuild \
        -project "BMI Calculator.xcodeproj" \
        -scheme "BMI Calculator" \
        -sdk iphonesimulator \
        -destination 'platform=iOS Simulator,name=iPhone 11 Pro,OS=14.0' \
        -derivedDataPath Build/ \
        -enableCodeCoverage YES \
        clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # convert coverage report to sonarqube format
        bash xccov-to-sonarqube-generic.sh Build/Logs/Test/*.xcresult/ > sonarqube-generic-coverage.xml
      - |
        # sonarqube analysis
        export PATH=$PATH:$FCI_BUILD_DIR/sonar-scanner/bin
        sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.organization=$SONAR_ORG_KEY \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.projectVersion=1.0.0-cm \
        -Dsonar.sources=. \
        -Dsonar.cfamily.build-wrapper-output.bypass=true \
        -Dsonar.coverageReportPaths=sonarqube-generic-coverage.xml \
        -Dsonar.c.file.suffixes=- \
        -Dsonar.cpp.file.suffixes=- \
        -Dsonar.objc.file.suffixes=-
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
