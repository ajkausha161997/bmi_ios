workflows:
  ios-project-debug: # workflow ID
    name: iOS debug # workflow name
    environment:
      xcode: latest
      cocoapods: default
      vars:
          XCODE_PROJECT: "BMI Calculator.xcodeproj" # <-- Put the name of your project here. 
          XCODE_SCHEME: "BMI Calculator" # <-- Put the name of your scheme here.
    scripts:
      - name: Run tests
        script: |
          xcodebuild \
          -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
          clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - name: Build debug app
        script: |
          xcodebuild build -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
    artifacts:
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-project-release:
    name: iOS release
    environment:
      vars:
        CM_CERTIFICATE: Encrypted(Z0FBQUFBQmZBVWJjRVRNQXBpV0pJazZOa3JKekVDSWhjS01peTA4Rkt2S1lMLXVyVlkzR0NfSUpWV0ppMVdMcDFQeUpQRG11cERUYUtqT29rc1JRZmw5RU45R19sQUN4bnZpQkV5VmRlcDVxLVQ1UXRhMXFYd3ljVXpjU1VLTGlvLXhFZUlGUFFlUklhV2IydTJ5akVBWUttWW9EY1BDRVJyWmRpS0VDY3dldDF6bUhJX2p3bEQtRTRjX1RmUnh0NjZnUjY0b3hpbExlSGhBTE9iZnJRNVBaM2VNcDR6U2ZBVmJabEJjaDVOeGR0bVUwenZ6OHZGdkJsS3dpNnNacUtXS0xQaUxhQWF5R01pNUhxOWZOR1ZmU3EtQ3Y1VFoxaWx3WWtSTExQZzhqS2VWZkx5QTQ1SFgwa0xORG5jQkwyODEzd3pmNlZqeU5GM3p4VHhmQVhKcXJxZFgzaVBDVnVNVEtqdERtNDRmVXEzWUVCb0xmRFQ0YWlFc3dSbWh6MDZwZFRyRUdxQ1g5N1E0WEU1V0VaNzdYOEVRY1dVZ1hlV1VROHhlQWgzbnVZXzdMWS1fVDRfNFE4OFg1S2JaUUJCcmpWenozNTlKbkVzLWJzMklReXluNGJFeVZxb2FrUDZURTBWeG1XWGJfaW1ZaHZWanNoakgxSHUyMHg2aWN5QmtxdFVROGlza1NXV0VGTVlnTEhxTkVRVUZyb0xrcnJXOUplcWwwUU1PSG0zSXl4dlhGXzhYdk9pZG9xbWRmMmxCTGJYWDJPQ2RlRWdhMEM5OXUwNVc2dEIxNlhnUGFtM0E1UVdGUGNKT2pYQ0M2WjZmWllYRGh3SDItTlFaYVp4Uk5UVTJYcnJMNHBpSlY0SG5nY09MSVlUb3BpMFNDNFRNNnVFazcwald0dTJfRE1nSlVtOWhwT3ZidFRDZEJLMTBzNDlLLUdZa0dEaU9BVlZsVE5fbzNSR21wNTVEWFQyZ21wdzU5TmRaMk9hUmF1RmZySGV2eEJsZmZEUllPSjVIQVJrQTBQVzRvMEVBVUpqWmhJMkNlR2ROelJrY3FVcEtuVGZidVNBa3hVeGc2UURvSGxyU2owRHc1czljSEV6WHpqdHJ2a1NJS2NIZ1Y5NEgySFVYZkxFR0FadDA2cHM2MG10cGViSUhTbXEtVmxEcm40UzU1TmRZLXVFRTI4LTlSQnRrSzF5YlBpTlc4dzN5a2FrY2VSbU9GWGhVaWJHekdJVWZ4SWFxaXloaVZNbHdITGNQLVllSGRkeVlDYkVYZzRzM1BXWF9sNjRTSHJFU0stRG52anptZ2x6cGlwWGdEdzNwNXBiTFhnU0NvWTRCczV6bU9EV2VmY1FndnNELVA2WHRUdVdMNHU0YUs4N0lFYUJmR2ppby1VNElRRFNVVktrSjlsZ1dxaHYtdDdHVUlzdmxpb2QzRkpldmUtN05laXNmZEEyU1M0VkFZSm0tZ0J6NE1rNzd3ZHZJWm5tOVB3eUxLLWdyZWlrRVM5V0pvd3l2UVdIbGlKd1BVd1h2WkR0c1ZyUHpWczdFdUJVamhxUG1pems4Yk5HNGN0QVlyaUY0UDhxV3NtS1JRMlpteGNfUHQ5RkVuS1dJZXVYWEJXbnlVbXFTZm5VOUhqNi05blpHd0tzekR5X0tuVUcybmJCWHFjV2NSN0FyZmxUTGJ3Z0d4S1JsRGQ2enE0M2lVamhVUWlxck54WmduRTl3cGtiWG1YMGdlMTZCOHAzMGU2VjZTRGdTVXpyNXdjU0FZTFJILVdxY3pYZXEzdHg5V2k1TWxlblI1a2lodGR4NENweFhjaWNKS0hlMmExUFgzRVRuRWJ0STR5aV8wYzJRaDNsY2haSEl0LWNpZVduTjBYSDhIVmdSeVRZM1kzaDFrajh2WGZoR2RudUNqUEItV0xtZlZ6dmM4ZnRDX1d4azh1RUJlTWhLeU9EYmNmaFd1aHR1QUFicUE2YVJpR19uc2JBTlZaQzNia0JmYkRMS2gwYWM1OXFncjZIT1k2RV95OXo0bmJXVXBYWHZHZ3pITG1PdnJqUjJ0Ykw2MVJKTnB1REZ4T3FIWldNdWszV0FuV3ZHMDFiRUJ5d1M2bjNNdDBXQWN2cWFvemdob3NFQkpxRi1TN1k2cHRIMUI4VFBLLXRNUlFpYXZscmdtRWZQUjF1UFY0S1lEN1hKc3ZtVDVMeWNSd3dmTnJtSlZfSkpJLTBJWVprQmxqLXYxeGpjOVc3YS1XTUozVHhyYkh4c2JMQktuODN6LW1nVFF3TG9fTjFFTmhIcDd4U0E5VUE2Nnl2RmFCYXN1SmdmVUNyRjVQdnZwVGdaMWZ5TFpSRkpTZ2JWeEphc1JZdEg5LUdJcFpWM2lqdHFPdnFDd2I1YzN2V1ZwSG4tX1NvMWVBS3JqcEUzQTl3SnJRN3AzanpfbnRwbkFFMGNoOTBKakt6b2gwNF9VUTVEWjJGUW51UGlDSDgzeUdQV2hGZDNhU0ZmV0NkS3NzZ3l0VVVpcks2SlBBblU0bEJ6Z3IzRHExSEpIUk5oOGdCT1Zpem43ZDQxYm5wNVlNUDgyb0pSRmYtdUJNSmd1QUE2S0lIT3ZCcEZEamhEOGxWamNnYldsNlhRY19wSkx0akJmUmpPQVpoSElrWUQtOUFjMWZENzA0RTdpc2hNdmR3ZjJtOXJQUVZ2UTdQb2dQMnNGYW1La3pqMHdabG5kaXl4WmtKdUY1MTA5cjFiay0xb3VpNTZRUVhZNGpKY2tpRlZQSlAxUTV5VzJVR0FSTXZCTUt1ZGx3aTFYS3RpdXlSU2NHb0hNbUZRLUxWeFNMaXZfTHlsZnJUUzRqQ1lfb1BRNmoxa2t2djBkLTR2dE1GNlNZanpiQVpadllYcDM3X1FGRE1GRDhQS3Zjazh2RTVySFRoRVZSYW1lMUo5WFhMY1FYWWFIVlEwZEF3YXBKc0V4dTRtWlRrdkc1Y0t4dWJOSVpsX2NsMDdfdHdNLXdYczB4U3lwZFg3QmdvVGo1aE1VTVlMZUhHZk9ZRnJiZ1c2WFl5cXBnMGlIVzNfdUJwblNYWnpZSmNxeVktRmZ2MlhidDFVR1RvRVdnaTl2MlJBM3I1UFpKaTRCQzJBaUFSdEhHUGY5T2o4UGZrOXVTMnIxYV96OC1odVNIZWhLcXVGaU1ZeXExcTZ5ZUJRamZpdU1NX0daU0s0dEVKc2F5LWhjYlN6WmY4VjJDTDZTV0Y1RUQyMGRiMU1OVkVocmNLUUNoRXB5RzgzVURtZFNpOW9ORHFUTjZuLWpxNGNsSk5iRy11WnVGeUFZLXgtaDdpejYxb0hGaHJFWXBVRzZHbE0zaEIwMC1wZEw5QzRFUWZtR0M4enlRd01KenJKc3dfV3FkNGJJeXVod0tzUzc4WHpoRDh1UjlMYWcxY284WXB5NEVDb2xhU01pbDlZN2FnZ3hCQnhmZmFBSmdpQzY4ZXhHSXowN2J5Unc1Vk0wOFc0ZEd1aWpYenZzRF96Z3F5OXhLNUtYRTIwZ0JPcHVzbElOTmpVSVBPcmpGdy05bnd2R1dObEZWTDYwNmh5UU02cEhRdDlYM1c1cUMtd2g2ZV9FZUpXT3lQNGhsSmhpZ2Q4dGdiSkV3S3o4Q21uM01Od1dvamg5RTItNzJkci1kVllVbjNGZEdzX2QxeUdHOUUydjJlRy1hZmxlQjNZOEdWbTBHS1VSNE9QOVVXNVlUNDM3NHEzZkZncUZDUEJIR2dHQXJkNUxrSVZSM2w2WEhEeDk5SzB0RGFPUmJucTliOFhXVi1lUGQ5TTYtRVlYU0ZXVk43RG9qQldaRzRvckVkY2hWWnpOdko2emwzUW1ZcFNzbVRFNkRPeHN3clZ4TXNjQ1RhSzZUT2t3bGtRb09MWVBxZWtDTzJIMHNpOWRMQS0zUk0yeFdDcWRhOTVfU3NaWkxrVUljUzh3Z2NGYmRuaFVWT2Z6OWpmbDZlUkJpTlpEUWlmLTVOR1JXWkhwN2RjdVZibGc3eC0xYWhielVDRkZQbS1DMjJET2M3VE1GTVNkaHlHQTYwQjBrRGJjWDFFVG5XU3VFRURfdkxQSDdtTS1NX1JHbEpuWjJ5Nzl0UkNLM2ZfdUM0aENQamZIdW5WdmRLLVZuOXZMallRaWE3RUNEakdodFVObEFlOVVHXzB2b29ydEJSZllYSmtsdlFQemw1ZUhrRGN4OHpPaUtuXy1QaG1vWG1ha01FaUhPWV9XeGppODhLb2IyYkJDWkh6U1d5Nm90THhiSWI0c0duNjJSY2VnU0tzZE54bzViQnY4QUhHbW5xVkZ6VFNLbm1ORzFhZk82cDZVbTItU3hFMVdueGJZbHNLUkFMSmRLeENHbnppXy10a3ItSU0tZll6ZkpUNFpIeUxEVExDdUZVWEhHakpNQkFmNlhXdmpzdXM1OGMtaGRRTmV1QW9Sa3BsUm45OGV2ZFlkdEh5U3Y0dnVUMGF4MkNYckNBV0ZHQWM1VlBOYWxZeDFJZjNuOHJkWlZQTnhsUVFTZzd4T0dpWEp1RUpvMXNsMV9PUERaelJkTWY0MnpEeHFtdkFWeFd0SkJJZkh5SWZ6WkpUMlhvM0FFU2ZOa0tZamZ5eHplb0V5Q1FXT1hFTEMzczRsNzhlZlM1UEg3YjBDc1V0UEFDYTBfdHRHelQ4T3JmUEtVOGw4bzlmbUpuTGlHUzdTSDczd3JLR3c0SWNIalU5VHgwY29FYWY4YmV5d2RydlRhZkdZQWJta01ScllFaG5kdGlTYXVmZ1NKVGtCeUdLVTFtYnpDTEZ3aUN4VVFRa2w3QmxuVHd0S09vNnNfcWp4MUtQRmNPcEMtWFBrTEJhS1JWUnMyYWg2Q1JXVzlvY3VvQzlRa2Vhb2JpeEp4TUV5RGNmVE82ZXpQUFlkMHd5XzQxY1FGdjNOZVFDZjFPdEcwNUJuRDhBV19iN05vRkpvSnZhaV9UVE40OGR2bkNDcEtmbm04bnZlUnBVNERXSEoxRTc4SUhIMmJrUldUdWtpTUFOVGlGYV80SVpUbE16Uk83R05kZk5fU0x5M2FoM2JkRzYyRzFfM0otWEJSZm9YaEhPWFZKd01mWXh5Mkwtdm9rUDZEaDhjUkN6Zlk5aFB0dm9ZYUJJYkMya2FFUHlqUWJvdFdnRndDLV93ckMycjJ5V3h3RFQ5akdhaW1EOU9XcldHaFFlcFFBSDZTdkh4OVRQYklHQjdGS19EM1JlcEwzdzlnX18waGluTTZ4M2Q4cDN5YUpVYXg4WENlT0t2T3ZET2VXUDhzb0tfRmdWRXBKYVpIZ0pmb2paa21oNU5OLW1MQkdPQ1pzb3ItMnRpdmRFMDA0bnRBVmRudWs2WjhWUk5GUU54TGlYN1BodlRVNGZEa2V4Q1ZaU0tlN003Z05DZkJaSGdsalJhMVNIYzF2dHJ1TkdjYkVSMjNYWlA3Z09fTzN2UjJEcFlvRVJrcHFGN2ZHX200M2x3YVUxTHppMThuY2JIZ0J1dDk2OGVOWVk3dE1vdjJQUi1LLWlBcVhLUkNpZDA1U1VIS0pfN2xHd1E2MGZKMDNhY3RQM0ZhWFI1UWM1RldzWk54ZF9sOHpQVDBXWTdVUkJKMzZhU0tpMERWY3hfcTZrcF9kc1A5V1hleDByQ0gxMVZwaTh3V2Eyc3FacktPWlNGVDluZ3J4dnpzeTJRTW9GaVcwYXctVEg1QVRrX2JLNk1ocThLeWdiMFpBQ2UzdG5waV8yNWZfUkxReHp2YUV4VU92RWRGSTV2Zjc0QzhwTXhOOEZPVG1oU1JLRDh5d1czQmFVNG5RTk9DT0JISE5TQzdwQ0YxeTdjWkJlRm5meVZ4Q00tZ0E3MFFuMjhXeS0yVnRheXR4dm1LTkxfZlZnbWM4YnZLYjRRYTVma0ZPUHNuSGs5SmlJWkFjdjZTcTZubE4xVlhlT3FSZ1U2Sl9zb2h6cFE0cWRjRnA1b3JucElocHVWQmZNd3ZNbVhNei1oeEVHa283UWNzVlBBNUNPb1h0dXlWWUFaWE5hRURHNS1XUUpDRmRUcFh1NGtNX3dKTm52QnVvckMwNERqTXpWMjRjNVMtTXJ2NU1sX2VxX2tvbExLa3VfWDRMZ185TjUwNnZHNlFmSHc2RTV1UW9wYnYxYS1xVmtZWDR5OVd2azVBMENPRFFFTGdTdmJXTndVSjRVeGVXd2ZxZXFpbFluLTM4NzEzbmxmTHI3WERfRGlCRFJZWnJsNWhETHRSdm5SeDAwUlZueVh6SFc0ZEtIeW1IX09wejdlSzd6cWZWdlB3QUhPOUEyLV80Rmh2YmNCdFpHQkF0R3NBYWVIcEttRnpZaWtpUVkwOXFubG11c3hrRUo1LVJtbjA0c3NPUTZyTU4zRERiTVVVdTJuVVNWVjFNbk1IdmNSNGsxeDh1b0hKYlEyckxoUG1ncENMbGFfS1VxYlU4aVpiQjgySnljOWliUkxwb3A2bTQ4b3JXeGdWc29rRjFtZFZzazRjMWJaWC12SDh4dWEzUXZZWjJrTU9TcDdWQ19MazhYWU9oZmY3RTY0T3pMRVJDeW5qVUNHaVN5ZEtkU0V6U19jbWZLTHpIc0drYmpyMUhaZV83UHJmQWZ1QkVTUXNoMTVJWTZVcTZ4U1BXM0FqME9PbE9wTnlxT0ttNVNQdFdFOXgwc2JuN05QTC1yaTd4MnV5OGlTMHlYMkh2UU4yWlhSRGt6VmdnTm9Tc1pRSU5QZzgtRXN0Qzd1bnpZdWphZVZtdmNrUXowQzctTDNDdWM1azBsaFhXdXhCSnZSTVhvZktVUmtZZktaT2ZqZEE5R0VsTVhjRnpNSVRrZVRGbll0ZGFjV0NsTk9odHpPQVppNUV5c215QWlFdldrMkFXZlFKRWEtWWpGNllIcjVKb0FsSTdlSmxubFVVOU95YXp5UEtZemh3aUxMY1NRSy1vSkhRYjNLTG9IdWFqNDVkSlhYcm9tTHE1Vms4NUowY2J0SlRlVUdKb3BsNWlsMTVCYjJ6b3NqRmhmaS1La1daSmtlb1ZQOGdlcEdud21RcjRNYkNnQjR0dk9PcThSVXVvS3QyTUpxUEZZVHZuZEhUa3lCYm00bzlsSTJqNmJzRTRSV2FKbzQtaGdIcHM0V09sMElDWlVGdUpPcmJnOUd6X0ZoTlNXUmxhS3BHNFJ5aVdxbjZ5eHI3MGxERnBuZEkzU0xJUTA0cWV3d09wX0MyS1dCb0dlMWlwa1JNZHZDUWl6V3c4MHQtcHVWcl9SZDN1ZWtkdDdvandGeDRpWllkTU9TSVdTek1pb0FQbF9xUjFmZldWT0hhdzNVU19vYks3b1MzRzg0aG1EZmJRY2pLOUM2M3dYVEtDdlc2UE9ncGg5N2dCT1JqMk1xU1pBQ1B0X2xsUm54QWFtMTBBWnJIOURzeFo0VlFRc3ZyZEtJaC13azMxQlBFcm9YWmRmdTFmd2pkdWJGZkNjVDlYWkhBczd0SWxJc21NeXM4QUJQbmY1MUNFOVRSS1QwRUFuclhUdFVOeHp4VXJHb2Fza3hxT0xNdHhCaS0xWlk0R2VQX1Q1c25XQnJya2thTGF3Nk5rMFQyaVNTcVpfSVNJMXh2ZjFpRzVSZTQ2MHItS1BOVW9tQ0dtRy1YdGUyQ2xnRkhtY3p3elAxczFvMXllQ2ZpME1hQ0pmdTJjZGpXaUR5bFV0MTBtTFBEUUNaS0hrOWJMZUJKNTBXQ0VwbExUcWJjcDVTcEpiYXJmNDZzY3kzUVZJdzMybEJlUEZ3V2RaTklBT0xDRHNnZlY0anBEa3lsbk1XVTRIQkV2NG9sRjdjSWtkUnR3WmdhY0h4Sk9IRzRCRXlERDh3a2Zuc0E0bzJDM3dQbmlWMEtVUGM4Q3otcUN1Z2x2ZkRodmFwSmlKZWt2N0g1X0dJcU1FPQ==)
        CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmZBVWFOWVJoOHJTb3JvYzY0al84WFdhNGZlTTY2bDJXMlhWTjhjcEJBVHdEaDRDSzFCMGt4b0l6RDRwVU12RXc5eVdvOHIzeDNOUXpsNHJIdkllX2VfX0xObFE9PQ==)
        CM_PROVISIONING_PROFILE: Encrypted()
      xcode: latest
      cocoapods: default
    scripts:
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_HOME"
        PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
        echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up signing certificate
        echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
      - name: Run tests
        script: |
          xcodebuild \
          -project "$XCODE_PROJECT" \
          -scheme "$XCODE_SCHEME" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 12,OS=14.1' \
          clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # build ipa
        xcode-project use-profiles
        xcode-project build-ipa --project "BMI Calculator.xcodeproj" --scheme "BMI Calculator"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
  ios-sonarqube:
    name: iOS sonarqube
    environment:
      vars:
        SONAR_TOKEN: "Encrypted(Z0FBQUFBQmZpQmtjU3JxNFJMOHBNMXYzZV9yMkZpb1p0Y2NKQ0pWbjhiNjNRLWhzcndDa2NMRU5teTVtVWlpYlFCTnF6eHVLMlNDaTVVQWxERHJGb2JRX0tZSm5jOUtmQUZ6Q2FVQjlzSW43VGE0WkZYdzVuOHVYSHdkSHdTOE82MlAzVXNoeEVPSm8=)"
        SONAR_PROJECT_KEY: "Encrypted(Z0FBQUFBQmZpbVhKVXc3eldWX0t2am5jWG1MU0RwOEFJVThkMmdZRHB1YTZDdkhMcGFqaGNQR2plYWNmYkd0UkVOZFQyZWtkMFhIYXVnN1RyWkd1UjZPNGRnTWFIZDRvUHc9PQ==)"
        SONAR_ORG_KEY: "Encrypted(Z0FBQUFBQmZpQ2E2ZUQ3N3NwajdDOUhYYkRXUnN3WW84WEdNeVBYUm1LcjNxLW5NdV9JVWMxbUt5cVc0VHUySWNYeVhIX3pMNGtjVklwTlY0MTBDX1dVX3VQNXBlbVZRRnc9PQ==)"
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # download and install sonarqube
        wget -O $FCI_BUILD_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-macosx.zip
        unzip $FCI_BUILD_DIR/sonar-scanner.zip
        mv sonar-scanner-* sonar-scanner
      - |
        # generate test coverage result
        xcodebuild \
        -project "BMI Calculator.xcodeproj" \
        -scheme "BMI Calculator" \
        -sdk iphonesimulator \
        -destination 'platform=iOS Simulator,name=iPhone 11 Pro,OS=14.0' \
        -derivedDataPath Build/ \
        -enableCodeCoverage YES \
        clean build test CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
      - |
        # convert coverage report to sonarqube format
        bash xccov-to-sonarqube-generic.sh Build/Logs/Test/*.xcresult/ > sonarqube-generic-coverage.xml
      - |
        # sonarqube analysis
        export PATH=$PATH:$FCI_BUILD_DIR/sonar-scanner/bin
        sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.organization=$SONAR_ORG_KEY \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.projectVersion=1.0.0-cm \
        -Dsonar.sources=. \
        -Dsonar.cfamily.build-wrapper-output.bypass=true \
        -Dsonar.coverageReportPaths=sonarqube-generic-coverage.xml \
        -Dsonar.c.file.suffixes=- \
        -Dsonar.cpp.file.suffixes=- \
        -Dsonar.objc.file.suffixes=-
    publishing:
      email:
        recipients:
          - sbis1999@gmail.com
